import { Decimal as DecimalJs } from 'decimal.js';
import { SuiClient } from '@mysten/sui/client';
import { Transaction } from '@mysten/sui/transactions';
import { NetworkConfig } from './interfaces/config';
import { IElendMarketObligationCalculationOperation, IElendMarketQueryOperation, IElendMarketReserveCalculationOperation, IElendMarketRewardCalculationOperation, IElendMarketRewardOperation } from './interfaces/operations';
import { DetailBorrowApyRes, DetailBorrowedRes, DetailIncentiveRewardRes, DetailSuppliedRes, DetailSupplyApyRes, MarketClientRes, ReserveClientRes } from './types/client';
import { Network, UserActionType } from './types/common';
import { Obligation, Reserve } from './types/object';
import { Decimal as DecimalFraction } from './utils/decimal';
export declare class ElendClient {
    readonly networkConfig: NetworkConfig;
    readonly suiClient: SuiClient;
    markets: MarketClientRes[];
    obligationOwner: string | null;
    obligations: Map<string, Obligation>;
    reserves: Map<string, Reserve[]>;
    private readonly depositOperation;
    private readonly borrowOperation;
    private readonly withdrawOperation;
    private readonly repayOperation;
    readonly rewardOperation: IElendMarketRewardOperation;
    readonly queryOperation: IElendMarketQueryOperation;
    readonly reserveCalculationOperation: IElendMarketReserveCalculationOperation;
    readonly obligationCalculationOperation: IElendMarketObligationCalculationOperation;
    readonly rewardCalculationOperation: IElendMarketRewardCalculationOperation;
    constructor(networkConfig: NetworkConfig, suiClient: SuiClient);
    static create(network: Network, options?: {
        isLoadData: boolean;
        obligationOwner?: string;
        suiClient?: SuiClient;
    }): Promise<ElendClient>;
    loadMarket(): Promise<void>;
    loadObligation(obligationOwner: string): Promise<void>;
    loadReserves(): Promise<void>;
    reloadObligation(): Promise<void>;
    reloadReserves(): Promise<void>;
    getMarkets(): Promise<MarketClientRes[]>;
    getReserves(marketTypeInput?: string): Promise<Map<string, ReserveClientRes[]>>;
    initObligation(marketType: string): Promise<Transaction>;
    deposit(reserve: string, liquidityAmount: number): Promise<Transaction>;
    borrow(reserve: string, liquidityAmount: number): Promise<Transaction>;
    withdraw(reserve: string, collateralAmount: number): Promise<Transaction>;
    repay(reserve: string, liquidityAmount: number): Promise<Transaction>;
    claim_reward(reserve: string, option: number): Promise<Transaction>;
    getTotalSuppliedUSDValueOnMarket(marketType: string, reserveIds?: string[]): DecimalJs;
    getTotalBorrowedUSDValueOnMarket(marketType: string, reserveIds?: string[]): DecimalJs;
    getDetailSuppliedOnMarket(marketType: string, reserveIds?: string[]): DetailSuppliedRes[];
    getDetailBorrowedOnMarket(marketType: string, reserveIds?: string[]): DetailBorrowedRes[];
    getDetailSupplyApy(reserveId: string): Promise<DetailSupplyApyRes>;
    getDetailBorrowApy(reserveId: string): Promise<DetailBorrowApyRes>;
    totalSupplyAPYWithNewAvailableSupplyAmount(reserveId: string, newAvailableAmount: bigint, userAction: UserActionType): Promise<DecimalJs>;
    totalBorrowAPYWithNewBorrowedAmount(reserveId: string, newAvailableLiquidity: bigint, newBorrowedAmount: DecimalFraction, userAction: UserActionType): Promise<DecimalJs>;
    getTotalSuppliedUSDValueObligation(marketType: string): DecimalJs;
    getTotalBorrowedUSDValueObligation(marketType: string): DecimalJs;
    getDetailSuppliedOnMarketObligation(marketType: string, reserveIds?: string[]): DetailSuppliedRes[];
    getDetailBorrowedOnMarketObligation(marketType: string, reserveIds?: string[]): DetailBorrowedRes[];
    calculateCurrentHealthRatioObligation(marketType: string): DecimalJs;
    calculateRemainingBorrowAmount(borrowReserve: string): DecimalJs;
    calculateAllowedWithdrawAmount(withdrawReserve: string): DecimalJs;
    getTotalIncentiveRewardStatisticObligation(marketType: string, reservesIds?: string[]): Promise<DetailIncentiveRewardRes[]>;
    private getAssociateReserveObligationData;
    private getMarketTypeOfReserve;
}
