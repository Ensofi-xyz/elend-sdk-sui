import { Decimal as DecimalJs } from 'decimal.js';
import { IElendMarketReserveCalculationOperation } from '../../interfaces/operations';
import { Reserve } from '../../types';
import { DetailBorrowApyRes, DetailBorrowedRes, DetailSuppliedRes, DetailSupplyApyRes } from '../../types/client';
import { UserActionType } from '../../types/common';
import { Decimal } from '../../utils';
export declare class ElendMarketReserveCalculationOperation implements IElendMarketReserveCalculationOperation {
    constructor();
    getTotalSuppliedUSDValueOnMarket(reserves: Reserve[]): DecimalJs;
    getTotalBorrowedUSDValueOnMarket(reserves: Reserve[]): DecimalJs;
    getDetailSuppliedOnMarket(reserves: Reserve[]): DetailSuppliedRes[];
    getDetailBorrowedOnMarket(reserves: Reserve[]): DetailBorrowedRes[];
    getDetailSupplyApy(reserve: Reserve, currentTimestampMs: number): DetailSupplyApyRes;
    getDetailBorrowApy(reserve: Reserve, currentTimestampMs: number): DetailBorrowApyRes;
    totalSupplyAPYWithNewAvailableSupplyAmount(reserve: Reserve, newAvailableAmount: bigint, currentTimestampMs: number, userAction: UserActionType): DecimalJs;
    totalBorrowAPYWithNewBorrowedAmount(reserve: Reserve, newAvailableLiquidity: bigint, newBorrowedAmount: Decimal, currentTimestampMs: number, userAction: UserActionType): DecimalJs;
    getTotalSupply(reserve: Reserve): DecimalJs;
    getBorrowedAmount(reserve: Reserve): DecimalJs;
    getLiquidityAvailableAmount(reserve: Reserve): DecimalJs;
    getAccumulatedProtocolFees(reserve: Reserve): DecimalJs;
    getReserveMarketPrice(reserve: Reserve): DecimalJs;
    getMintDecimals(reserve: Reserve): number;
    calculateUtilizationRatio(reserve: Reserve, slot?: number): number;
    private calculateSupplyAPR;
    private calculateBorrowAPR;
    private calculateBorrowRate;
    private getEstimatedDebtAndSupply;
    private getBorrowRate;
    private compoundInterest;
    private approximateCompoundedInterest;
}
